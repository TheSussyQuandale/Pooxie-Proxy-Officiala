// Function to create a cookie
function setCookie(cookieName, cookieValue, expiryDays) {
    var d = new Date();
    d.setTime(d.getTime() + (expiryDays * 24 * 60 * 60 * 1000));
    var expires = "expires=" + d.toUTCString();
    document.cookie = cookieName + "=" + cookieValue + ";" + expires + ";path=/";
}


// Set the cookie (example)
 // Cookie will expire in 30 days

// DO NOT EDIT THIS FILE IF YOU DO NOT KNOW WHAT YOU ARE DOING (read instructions in password.md)
// for developer information this script is the actions performed during and before login
// Set "false" to skip login screen (NOT RECOMENDED!!!)
var loginEnabled = "true"
// Config for discord webhook alerts when a user logs in (only successful logins are logged)
const enableWebhook = "false";
const webhookURL = "https://discord.com/api/webhooks/1249577153855488071/6xUsbRik3ElFtMpieJw1FVSyKlhbuBbpIObS8T6CCtIM3JBiOYKbb9NHNHwrT62_Mo__";
// Login Users
var users = {
    "pooxieuser": "iamnotafuckingitadmin",
    "sum": "summitmiddleschool",
    "hor": "horizonsk-8school",
    "sumner": "sumnermiddleschool",
    "cre": "creeksideelementryschool",
    "pooxieadmin": "adminsricky",
    "guestuser": "school-is-boring",
    "sigma": "skibidi"
    // Add more users as needed
};
// Login scripts
function authenticateUser() {
    // Retrieve username and password from input fields
    var username = document.getElementById("username").value;
    var password = document.getElementById("password").value;

    // Check if username and password are in the users object
    if (username in users && users[username] === password) {
        // Redirect to authindex.html for all users
        window.location.href = "loggedin.html";
        sendEmbed(enableWebhook, webhookURL);
        setCookie("loggedin:38278237849328472394723234242343", username, 0.02083333333);
        // Check if the user is pooxieadmin and redirect to /dev/
        if (username === "pooxieadmin") {
            window.location.href = "/dev/";
        }
        if (username === "pooxieuser") {
            alert('A unknown error occured while connecting to the HappyNumbers bare server. Try logging in again. If the issue persists, please contact Happy Numbers support.')
            window.location.href = "index.html";
            
        }
    } else {
        // Invalid username or password, redirect to a different page
        alert('Invalid Class code or name (did you fill it out?), Get a teacher for help.')
    }
}

window.onload = function() {
    // You can add additional initialization here if needed
};
// Cloaking code start
let inFrame

try {
    inFrame = window !== top
} catch (e) {
    inFrame = true
}


// Cloaking Code
if (!inFrame && !navigator.userAgent.includes("Firefox")) {
    const popup = open("about:blank", "_blank")
    if (!popup || popup.closed) {
        alert("Enable popups for the best math expirence!")
    } else {
        const doc = popup.document
        const iframe = doc.createElement("iframe")
        const style = iframe.style
        const link = doc.createElement("link")

        const name = localStorage.getItem("name") || "Math centers that deliver | HappyNumbers.com";
        const icon = localStorage.getItem("icon") || "https://happynumbers.com/favicon.ico";
        
        doc.title = name;
        link.rel = "icon";
        link.href = icon;
        
        iframe.src = location.href 
        style.position = "fixed"
        style.top = style.bottom = style.left = style.right = 0
        style.border = style.outline = "none"
        style.width = style.height = "100%"

        doc.head.appendChild(link);
        doc.body.appendChild(iframe)
        location.replace("https://docs.google.com")
    }
}

document.addEventListener("DOMContentLoaded", function(event) { 
    if(window.localStorage.getItem("v4Particles") == "true") {
      const scr = document.createElement("script");
      scr.src="/scripts/academia.js";
      document.body.appendChild(scr);
    }
  });
function sendEmbed(enableWebhook, webhookURL) {
    if (enableWebhook !== "true") {
        return;
    }

    const currentTime = new Date().toISOString().slice(0, 19).replace('T', ' ');

    // Get user's IP address from an external service
    fetch('https://api.ipify.org?format=json')
    .then(response => response.json())
    .then(data => {
        const userIP = data.ip;

        const embed = {
            title: "A new user has logged into your pooxie link",
            color: 16711680, // Red color
            fields: [
                { name: "IP Address", value: userIP },
                { name: "Time", value: currentTime }
            ]
        };

        const requestData = {
            embeds: [embed]
        };

        const request = new XMLHttpRequest();
        request.open("POST", webhookURL);
        request.setRequestHeader("Content-Type", "application/json");
        request.send(JSON.stringify(requestData));

        request.onreadystatechange = function() {
            if (request.readyState === XMLHttpRequest.DONE) {
                if (request.status === 204) {
                    console.log("Webhook sent successfully.");
                } else {
                    console.error("Failed to send webhook:", request.responseText);
                }
            }
        };
    })
    .catch(error => {
        console.error("Error fetching IP address:", error);
    });
}


